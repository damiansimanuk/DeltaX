/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/security/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityRefresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/confirmEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSecurityConfirmEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/resendConfirmationEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityResendConfirmationEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/forgotPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityForgotPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/resetPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/manage/2fa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityManage2fa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/manage/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSecurityManageInfo"];
        put?: never;
        post: operations["PostSecurityManageInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostSecurityLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Product/productList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Product_GetProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Product/product/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Product_ConfigProductGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Product/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Product_ConfigProductPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Product/sellerList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Product_GetProduct2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Product/seller": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Product_ConfigSeller"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/roleList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Security_GetRoleList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["Security_ConfigRolePATCH"];
        trace?: never;
    };
    "/security/userList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Security_GetRoleList2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["Security_ConfigRolePUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/userInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Security_GetUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/claims": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Security_GetClaims"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security/forgotPassword2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Security_ForgotPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HttpValidationProblemDetails: components["schemas"]["ProblemDetails"] & ({
            errors?: {
                [key: string]: string[];
            };
        } & {
            [key: string]: unknown;
        });
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        RegisterRequest: {
            email?: string;
            password?: string;
        };
        AccessTokenResponse: {
            tokenType?: string;
            accessToken?: string;
            /** Format: int64 */
            expiresIn?: number;
            refreshToken?: string;
        };
        LoginRequest: {
            email?: string;
            password?: string;
            twoFactorCode?: string | null;
            twoFactorRecoveryCode?: string | null;
        };
        RefreshRequest: {
            refreshToken?: string;
        };
        ResendConfirmationEmailRequest: {
            email?: string;
        };
        ForgotPasswordRequest: {
            email?: string;
        };
        ResetPasswordRequest: {
            email?: string;
            resetCode?: string;
            newPassword?: string;
        };
        TwoFactorResponse: {
            sharedKey?: string;
            /** Format: int32 */
            recoveryCodesLeft?: number;
            recoveryCodes?: string[] | null;
            isTwoFactorEnabled?: boolean;
            isMachineRemembered?: boolean;
        };
        TwoFactorRequest: {
            enable?: boolean | null;
            twoFactorCode?: string | null;
            resetSharedKey?: boolean;
            resetRecoveryCodes?: boolean;
            forgetMachine?: boolean;
        };
        InfoResponse: {
            email?: string;
            isEmailConfirmed?: boolean;
        };
        InfoRequest: {
            newEmail?: string | null;
            newPassword?: string | null;
            oldPassword?: string | null;
        };
        PaginationOfProductDto: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            rowsCount?: number;
            items?: components["schemas"]["ProductDto"][];
            /** Format: int32 */
            pages?: number;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        };
        ProductDto: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
            seller?: components["schemas"]["SellerDto"];
            categories?: components["schemas"]["CategoryDto"][];
            stock?: components["schemas"]["StockDto"];
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SellerDto: {
            /** Format: int32 */
            id?: number;
            name?: string;
            email?: string;
            phoneNumber?: string;
            users?: components["schemas"]["UserSimpleDto"][];
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserSimpleDto: {
            userName?: string;
            fullName?: string;
            email?: string;
            phoneNumber?: string;
        };
        CategoryDto: {
            /** Format: int32 */
            id?: number;
            name?: string;
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        StockDto: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            quantityAvailable?: number;
            movements?: components["schemas"]["StockMovementDto"][];
            /** Format: decimal */
            price?: number;
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        StockMovementDto: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            quantity?: number;
            movementType?: components["schemas"]["StockMovementTypeEnum"];
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        StockMovementTypeEnum: "None" | "Sale" | "Restock" | "Return" | "Adjustment";
        ProductSingleDto: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
            seller?: components["schemas"]["SellerDto"];
            categories?: components["schemas"]["CategoryDto"][];
            stock?: components["schemas"]["StockDto"];
            details?: components["schemas"]["ProductDetailDto"][];
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ProductDetailDto: {
            /** Format: int32 */
            id?: number;
            imageUrl?: string;
            description?: string;
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Error: {
            code?: string;
            message?: string;
            detail?: string | null;
        };
        ConfigProductRequest: {
            /** Format: int32 */
            productId?: number | null;
            /** Format: int32 */
            sellerId?: number;
            name?: string;
            description?: string;
            categories?: string[];
            details?: components["schemas"]["ConfigProductDetailDto"][];
        };
        ConfigProductDetailDto: {
            /** Format: int32 */
            id?: number | null;
            imageUrl?: string;
            description?: string;
        };
        PaginationOfSellerDto: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            rowsCount?: number;
            items?: components["schemas"]["SellerDto"][];
            /** Format: int32 */
            pages?: number;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        };
        ConfigSellerRequest: {
            /** Format: int32 */
            sellerId?: number | null;
            name?: string;
            email?: string;
            phoneNumber?: string;
        };
        PaginationOfRoleDto: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            rowsCount?: number;
            items?: components["schemas"]["RoleDto"][];
            /** Format: int32 */
            pages?: number;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        };
        RoleDto: {
            roleId?: string;
            name?: string;
            resources?: string[];
            actions?: string[];
        };
        ConfigRoleRequest: {
            roleId?: string | null;
            name?: string;
            resources?: string[];
            actions?: string[];
        };
        PaginationOfUserDto: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            rowsCount?: number;
            items?: components["schemas"]["UserDto"][];
            /** Format: int32 */
            pages?: number;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        };
        UserDto: {
            userId?: string;
            userName?: string | null;
            fullName?: string | null;
            email?: string;
            phoneNumber?: string | null;
            roles?: string[];
        };
        ConfigUserRequest: {
            userId?: string | null;
            fullName?: string | null;
            email?: string;
            phoneNumber?: string | null;
            roles?: string[];
        };
        UserInfoDto: {
            userId?: string;
            userName?: string | null;
            fullName?: string | null;
            email?: string;
            phoneNumber?: string | null;
            roles?: components["schemas"]["RoleDto"][];
        };
        ProductCreated: components["schemas"]["IntegrationEventBase"] & {
            /** Format: int32 */
            productId?: number;
            productName?: string;
            description?: string;
        };
        IntegrationEventBase: components["schemas"]["DomainEventBase"] & Record<string, never>;
        DomainEventBase: components["schemas"]["EventBase"] & {
            isIntegration?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        EventBase: {
            eventName?: string;
            eventId?: string;
        };
        /** @enum {string} */
        ShippingStatusEnum: "None" | "Pending" | "Shipped" | "Delivered" | "Returned" | "Cancelled";
        GetRoleListRequest: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number | null;
            /** Format: int32 */
            page?: number | null;
        };
        GetUserInfoRequest: {
            userId?: string;
        };
        GetUserListRequest: {
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number | null;
            /** Format: int32 */
            page?: number | null;
        };
        GetProductByIdRequest: {
            /** Format: int32 */
            productId?: number;
        };
        GetProductListRequest: {
            filterText?: string | null;
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number | null;
            /** Format: int32 */
            page?: number | null;
        };
        GetSellerListRequest: {
            userId?: string | null;
            /** Format: int32 */
            rowsPerPage?: number;
            /** Format: int32 */
            rowsOffset?: number | null;
            /** Format: int32 */
            page?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    PostSecurityRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
        };
    };
    PostSecurityLogin: {
        parameters: {
            query?: {
                useCookies?: boolean | null;
                useSessionCookies?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
        };
    };
    PostSecurityRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
        };
    };
    GetSecurityConfirmEmail: {
        parameters: {
            query?: {
                userId?: string | null;
                code?: string | null;
                changedEmail?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostSecurityResendConfirmationEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResendConfirmationEmailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostSecurityForgotPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
        };
    };
    PostSecurityResetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
        };
    };
    PostSecurityManage2fa: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TwoFactorRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwoFactorResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetSecurityManageInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostSecurityManageInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InfoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpValidationProblemDetails"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostSecurityLogout: {
        parameters: {
            query: {
                returnUrl: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Product_GetProduct: {
        parameters: {
            query?: {
                FilterText?: string | null;
                RowsPerPage?: number;
                RowsOffset?: number | null;
                Page?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationOfProductDto"];
                };
            };
        };
    };
    Product_ConfigProductGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductSingleDto"];
                };
            };
        };
    };
    Product_ConfigProductPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigProductRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductSingleDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"][];
                };
            };
        };
    };
    Product_GetProduct2: {
        parameters: {
            query?: {
                userId?: string | null;
                RowsPerPage?: number;
                RowsOffset?: number | null;
                Page?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationOfSellerDto"];
                };
            };
        };
    };
    Product_ConfigSeller: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigSellerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SellerDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"][];
                };
            };
        };
    };
    Security_GetRoleList: {
        parameters: {
            query?: {
                RowsPerPage?: number;
                RowsOffset?: number | null;
                Page?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationOfRoleDto"];
                };
            };
        };
    };
    Security_ConfigRolePATCH: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigRoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"][];
                };
            };
        };
    };
    Security_GetRoleList2: {
        parameters: {
            query?: {
                RowsPerPage?: number;
                RowsOffset?: number | null;
                Page?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationOfUserDto"];
                };
            };
        };
    };
    Security_ConfigRolePUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"][];
                };
            };
        };
    };
    Security_GetUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoDto"];
                };
            };
        };
    };
    Security_GetClaims: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    Security_ForgotPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
}
